from odoo import models, fields, api
import json

class ResPartner(models.Model):
    _name = 'res.partner'
    _inherit = ['res.partner', 'ai.llm.mixin']
    
    def _get_ai_context(self):
        """Provide partner-specific context for AI"""
        context = super()._get_ai_context()
        context_data = json.loads(context)
        context_data.update({
            'partner_name': self.name,
            'partner_type': 'company' if self.is_company else 'individual',
            'email': self.email or '',
            'phone': self.phone or '',
            'country': self.country_id.name if self.country_id else '',
            'category': [cat.name for cat in self.category_id],
            'is_customer': self.customer_rank > 0,
            'is_vendor': self.supplier_rank > 0,
        })
        return json.dumps(context_data)


class SaleOrder(models.Model):
    _name = 'sale.order'
    _inherit = ['sale.order', 'ai.llm.mixin']
    
    ai_generated_description = fields.Text(
        string='AI Generated Description',
        help='Product description generated by AI'
    )
    
    def _get_ai_context(self):
        """Provide sale order specific context for AI"""
        context = super()._get_ai_context()
        context_data = json.loads(context)
        context_data.update({
            'order_name': self.name,
            'partner_name': self.partner_id.name,
            'state': self.state,
            'amount_total': self.amount_total,
            'currency': self.currency_id.name,
            'order_lines': [{
                'product': line.product_id.name,
                'quantity': line.product_uom_qty,
                'price': line.price_unit,
            } for line in self.order_line],
        })
        return json.dumps(context_data)
    
    def action_generate_quotation_content(self):
        """Generate quotation content using AI"""
        self.ensure_one()
        return {
            'name': 'Generate Quotation Content',
            'type': 'ir.actions.act_window',
            'res_model': 'ai.content.generator',
            'view_mode': 'form',
            'target': 'new',
            'context': {
                'default_model_name': self._name,
                'default_res_id': self.id,
                'default_prompt_type': 'description',
                'default_context_data': self._get_ai_context(),
            }
        }


class ProjectTask(models.Model):
    _name = 'project.task'
    _inherit = ['project.task', 'ai.llm.mixin']
    
    def _get_ai_context(self):
        """Provide task-specific context for AI"""
        context = super()._get_ai_context()
        context_data = json.loads(context)
        context_data.update({
            'task_name': self.name,
            'project_name': self.project_id.name if self.project_id else '',
            'stage': self.stage_id.name if self.stage_id else '',
            'priority': self.priority,
            'assigned_to': self.user_ids.mapped('name'),
            'description': self.description or '',
            'deadline': self.date_deadline.strftime('%Y-%m-%d') if self.date_deadline else '',
        })
        return json.dumps(context_data)


class HrEmployee(models.Model):
    _name = 'hr.employee'
    _inherit = ['hr.employee', 'ai.llm.mixin']
    
    def _get_ai_context(self):
        """Provide employee-specific context for AI"""
        context = super()._get_ai_context()
        context_data = json.loads(context)
        context_data.update({
            'employee_name': self.name,
            'job_title': self.job_title or '',
            'department': self.department_id.name if self.department_id else '',
            'manager': self.parent_id.name if self.parent_id else '',
            'work_email': self.work_email or '',
            'work_phone': self.work_phone or '',
        })
        return json.dumps(context_data)


class AccountMove(models.Model):
    _name = 'account.move'
    _inherit = ['account.move', 'ai.llm.mixin']
    
    def _get_ai_context(self):
        """Provide invoice-specific context for AI"""
        context = super()._get_ai_context()
        context_data = json.loads(context)
        context_data.update({
            'invoice_name': self.name,
            'partner_name': self.partner_id.name,
            'invoice_type': self.move_type,
            'state': self.state,
            'amount_total': self.amount_total,
            'currency': self.currency_id.name,
            'invoice_date': self.invoice_date.strftime('%Y-%m-%d') if self.invoice_date else '',
            'due_date': self.invoice_date_due.strftime('%Y-%m-%d') if self.invoice_date_due else '',
        })
        return json.dumps(context_data)
